name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  id-token: write

jobs:
  determine-release-type:
    runs-on: ubuntu-latest
    outputs:
      is_release: ${{ steps.check.outputs.is_release }}
      is_prerelease: ${{ steps.check.outputs.is_prerelease }}
    steps:
    - id: check
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        if [[ "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "is_release=true" >> $GITHUB_OUTPUT
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
          echo "Official release: $TAG"
        else
          echo "is_release=false" >> $GITHUB_OUTPUT
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
          echo "Pre-release: $TAG"
        fi

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run linting
      run: |
        make lint
    
    - name: Run tests
      run: |
        make test
    
    # Type checking is disabled to match CI workflow
    # - name: Run type checking
    #   run: |
    #     make type-check

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Bandit
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml]
    
    - name: Run Bandit Security Scan
      run: |
        bandit -r cassandra_analyzer -ll -i -f json -o bandit-report.json || true
        bandit -r cassandra_analyzer -ll -i || true

  create-release:
    needs: [determine-release-type, test, security]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        generate_release_notes: true
        prerelease: ${{ needs.determine-release-type.outputs.is_prerelease }}
        body: |
          ## What's Changed
          
          Please see the [CHANGELOG](https://github.com/axonops/cassandra-analyzer/blob/main/CHANGELOG.md) for details.
          
          ## Installation
          
          ### Option 1: Download Executable
          Download the appropriate executable for your platform from the assets below.
          
          ### Option 2: Install from Source
          ```bash
          git clone https://github.com/axonops/cassandra-analyzer.git
          cd cassandra-analyzer
          pip install -r requirements.txt
          pip install -e .
          ```

  build-executables:
    needs: [create-release, determine-release-type, test, security]
    strategy:
      matrix:
        include:
          # Linux builds
          - os: ubuntu-22.04
            artifact_name: cassandra-analyzer
            asset_name: cassandra-analyzer-linux-amd64
            
          # macOS builds
          - os: macos-15
            artifact_name: cassandra-analyzer
            asset_name: cassandra-analyzer-macos-arm64
            pyinstaller_arch: arm64  # Apple Silicon
            
          - os: macos-15
            artifact_name: cassandra-analyzer
            asset_name: cassandra-analyzer-macos-amd64
            pyinstaller_arch: x86_64  # Intel
            
          # Windows build
          - os: windows-2022
            artifact_name: cassandra-analyzer.exe
            asset_name: cassandra-analyzer-windows-amd64.exe
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install pyinstaller
    
    - name: Build executable
      run: |
        if [[ "${{ matrix.pyinstaller_arch }}" != "" ]]; then
          pyinstaller cassandra-analyzer.spec --clean --target-arch ${{ matrix.pyinstaller_arch }}
        else
          pyinstaller cassandra-analyzer.spec --clean
        fi
    
    - name: Test executable (non-Windows)
      if: matrix.os != 'windows-2022'
      run: |
        ./dist/${{ matrix.artifact_name }} --help
    
    - name: Test executable (Windows)
      if: matrix.os == 'windows-2022'
      run: |
        .\dist\${{ matrix.artifact_name }} --help
    
    - name: Upload executable to release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: dist/${{ matrix.artifact_name }}
        asset_name: ${{ matrix.asset_name }}
        tag: ${{ github.ref }}
        prerelease: ${{ needs.determine-release-type.outputs.is_prerelease }}

  # TODO: Enable Docker build when ready
  # build-docker:
  #   needs: build-and-publish
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v4
  #   
  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v3
  #   
  #   - name: Log in to GitHub Container Registry
  #     uses: docker/login-action@v3
  #     with:
  #       registry: ghcr.io
  #       username: ${{ github.actor }}
  #       password: ${{ secrets.GITHUB_TOKEN }}
  #   
  #   - name: Extract metadata
  #     id: meta
  #     uses: docker/metadata-action@v5
  #     with:
  #       images: ghcr.io/axonops/cassandra-analyzer
  #       tags: |
  #         type=ref,event=tag
  #         type=semver,pattern={{version}}
  #         type=semver,pattern={{major}}.{{minor}}
  #         type=semver,pattern={{major}}
  #         type=sha
  #   
  #   - name: Build and push Docker image
  #     uses: docker/build-push-action@v5
  #     with:
  #       context: .
  #       push: true
  #       tags: ${{ steps.meta.outputs.tags }}
  #       labels: ${{ steps.meta.outputs.labels }}
  #       cache-from: type=gha
  #       cache-to: type=gha,mode=max