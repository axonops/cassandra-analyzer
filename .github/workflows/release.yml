name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  id-token: write

jobs:
  determine-release-type:
    runs-on: ubuntu-latest
    outputs:
      is_release: ${{ steps.check.outputs.is_release }}
      is_prerelease: ${{ steps.check.outputs.is_prerelease }}
    steps:
    - id: check
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        if [[ "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "is_release=true" >> $GITHUB_OUTPUT
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
          echo "Official release: $TAG"
        else
          echo "is_release=false" >> $GITHUB_OUTPUT
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
          echo "Pre-release: $TAG"
        fi

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run linting
      run: |
        make lint
    
    - name: Run tests
      run: |
        make test
    
    # Type checking is disabled to match CI workflow
    # - name: Run type checking
    #   run: |
    #     make type-check

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install Bandit
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml]
    
    - name: Run Bandit Security Scan
      run: |
        bandit -r cassandra_analyzer -ll -i -f json -o bandit-report.json || true
        bandit -r cassandra_analyzer -ll -i || true

  create-release:
    needs: [determine-release-type, test, security]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        generate_release_notes: true
        prerelease: ${{ needs.determine-release-type.outputs.is_prerelease }}
        body: |
          ## What's Changed
          
          Please see the [CHANGELOG](https://github.com/axonops/cassandra-analyzer/blob/main/CHANGELOG.md) for details.
          
          ## Installation
          
          ### Option 1: Download Executable
          Download the appropriate executable for your platform from the assets below.
          
          ### Option 2: Install from Source
          ```bash
          git clone https://github.com/axonops/cassandra-analyzer.git
          cd cassandra-analyzer
          pip install -r requirements.txt
          pip install -e .
          ```

  build-executables:
    needs: [create-release, determine-release-type, test, security]
    strategy:
      matrix:
        include:
          # Linux builds
          - os: ubuntu-22.04
            artifact_name: cassandra-analyzer
            asset_name: cassandra-analyzer-linux-amd64
            
          # macOS builds
          - os: macos-15
            artifact_name: cassandra-analyzer
            asset_name: cassandra-analyzer-macos-arm64
            pyinstaller_arch: arm64  # Apple Silicon
            
          - os: macos-15
            artifact_name: cassandra-analyzer
            asset_name: cassandra-analyzer-macos-amd64
            pyinstaller_arch: x86_64  # Intel
            
          # Windows build
          - os: windows-2022
            artifact_name: cassandra-analyzer.exe
            asset_name: cassandra-analyzer-windows-amd64.exe
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python (native builds)
      if: matrix.pyinstaller_arch != 'x86_64'
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Set up Conda for Intel cross-compilation
      if: matrix.pyinstaller_arch == 'x86_64'
      uses: conda-incubator/setup-miniconda@v3
      with:
        miniconda-version: "latest"
        architecture: x86_64
        python-version: "3.12"
        auto-activate-base: true
        
    - name: Install dependencies (native builds)
      if: matrix.pyinstaller_arch != 'x86_64'
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install pyinstaller
        
    - name: Install dependencies (Intel cross-compilation)
      if: matrix.pyinstaller_arch == 'x86_64'
      shell: bash -el {0}
      run: |
        conda config --add channels conda-forge
        conda install -y python=3.12
        conda install -y pip
        python -m pip install --upgrade pip
        # Install packages that need x86_64 binaries from conda
        conda install -y pandas numpy
        # Install remaining packages from pip
        pip install requests pyyaml click pydantic jinja2 aiohttp structlog rich
        pip install pyinstaller
    
    - name: Build executable (Linux)
      if: matrix.os == 'ubuntu-22.04'
      run: |
        pyinstaller cassandra-analyzer.spec --clean
        
    - name: Build executable (Windows)
      if: matrix.os == 'windows-2022'
      run: |
        pyinstaller cassandra-analyzer.spec --clean
        
    - name: Build executable (macOS ARM)
      if: matrix.os == 'macos-15' && matrix.pyinstaller_arch == 'arm64'
      run: |
        rm -f cassandra-analyzer.spec
        pyinstaller cassandra_analyzer_main.py \
          --name cassandra-analyzer \
          --onefile \
          --console \
          --target-arch arm64 \
          --add-data "cassandra_analyzer/reports/templates:cassandra_analyzer/reports/templates" \
          --hidden-import yaml \
          --hidden-import pyyaml \
          --hidden-import pandas \
          --clean
        
    - name: Build executable (Intel cross-compile)
      if: matrix.pyinstaller_arch == 'x86_64'
      shell: bash -el {0}
      run: |
        # Build Intel binary using conda environment
        rm -f cassandra-analyzer.spec
        pyinstaller cassandra_analyzer_main.py \
          --name cassandra-analyzer \
          --onefile \
          --console \
          --target-arch x86_64 \
          --add-data "cassandra_analyzer/reports/templates:cassandra_analyzer/reports/templates" \
          --hidden-import yaml \
          --hidden-import pyyaml \
          --hidden-import pandas \
          --clean
    
    - name: Test executable (Linux/macOS)
      if: matrix.os != 'windows-2022'
      run: |
        ./dist/${{ matrix.artifact_name }} --help
    
    - name: Test executable (Windows)
      if: matrix.os == 'windows-2022'
      run: |
        .\dist\${{ matrix.artifact_name }} --help
    
    - name: Upload executable to release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release upload ${{ github.ref_name }} dist/${{ matrix.artifact_name }}#${{ matrix.asset_name }} --clobber
    
    - name: Upload Linux executable as artifact (for package building)
      if: matrix.os == 'ubuntu-22.04'
      uses: actions/upload-artifact@v4
      with:
        name: linux-executable
        path: dist/${{ matrix.artifact_name }}

  build-linux-packages:
    needs: [build-executables, determine-release-type]
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Linux executable artifact
      uses: actions/download-artifact@v4
      with:
        name: linux-executable
        path: .
    
    - name: Prepare executable
      run: |
        chmod +x cassandra-analyzer
        ls -la cassandra-analyzer
    
    - name: Install packaging tools
      run: |
        sudo apt-get update
        sudo apt-get install -y ruby ruby-dev rubygems build-essential rpm
        sudo gem install --no-document fpm
    
    - name: Create package directories
      run: |
        # DEB package structure
        mkdir -p deb/usr/bin
        mkdir -p deb/usr/share/doc/cassandra-analyzer
        mkdir -p deb/usr/share/man/man1
        
        # RPM package structure
        mkdir -p rpm/usr/bin
        mkdir -p rpm/usr/share/doc/cassandra-analyzer
        mkdir -p rpm/usr/share/man/man1
        
        # Copy files
        cp cassandra-analyzer deb/usr/bin/
        cp cassandra-analyzer rpm/usr/bin/
        cp README.md LICENSE deb/usr/share/doc/cassandra-analyzer/
        cp README.md LICENSE rpm/usr/share/doc/cassandra-analyzer/
    
    - name: Create man page
      run: |
        cat > cassandra-analyzer.1 << 'EOF'
        .TH CASSANDRA-ANALYZER 1 "$(date +'%B %Y')" "cassandra-analyzer ${{ github.ref_name }}" "User Commands"
        .SH NAME
        cassandra-analyzer \- Comprehensive Cassandra cluster analysis tool powered by AxonOps
        .SH SYNOPSIS
        .B cassandra-analyzer
        [\fIOPTIONS\fR]
        .SH DESCRIPTION
        Cassandra AxonOps Analyzer is a powerful diagnostic tool that performs comprehensive analysis of Apache Cassandra clusters.
        .SH OPTIONS
        .TP
        .B \-\-config PATH
        Path to configuration file (required)
        .TP
        .B \-\-output\-dir PATH
        Output directory for reports (default: ./reports)
        .TP
        .B \-\-verbose
        Enable verbose logging
        .TP
        .B \-\-pdf
        Generate PDF report in addition to Markdown
        .TP
        .B \-\-help
        Show help message and exit
        .SH FILES
        .TP
        .I config.yaml
        Configuration file for the analyzer
        .SH ENVIRONMENT
        .TP
        .B AXONOPS_API_TOKEN
        AxonOps API token (alternative to config file)
        .TP
        .B CA_LOG_LEVEL
        Log level (DEBUG, INFO, WARNING, ERROR)
        .SH SEE ALSO
        Project homepage: https://github.com/axonops/cassandra-analyzer
        .SH AUTHOR
        AxonOps Team <support@axonops.com>
        EOF
        
        cp cassandra-analyzer.1 deb/usr/share/man/man1/
        cp cassandra-analyzer.1 rpm/usr/share/man/man1/
        gzip -9 deb/usr/share/man/man1/cassandra-analyzer.1
        gzip -9 rpm/usr/share/man/man1/cassandra-analyzer.1
    
    - name: Build DEB package
      run: |
        VERSION="${{ github.ref_name }}"
        VERSION="${VERSION#v}"  # Remove 'v' prefix
        fpm -s dir -t deb \
          -n cassandra-analyzer \
          -v "${VERSION}" \
          --description "Comprehensive Cassandra cluster analysis tool powered by AxonOps" \
          --url "https://github.com/axonops/cassandra-analyzer" \
          --license "Apache-2.0" \
          --vendor "AxonOps" \
          --maintainer "AxonOps Team <support@axonops.com>" \
          --architecture amd64 \
          --category "database" \
          --depends "libc6 (>= 2.17)" \
          --after-install <(echo "echo 'Cassandra Analyzer installed successfully!'") \
          -C deb \
          usr
        
        mv *.deb cassandra-analyzer_${VERSION}_amd64.deb
    
    - name: Build RPM package
      run: |
        VERSION="${{ github.ref_name }}"
        VERSION="${VERSION#v}"  # Remove 'v' prefix
        fpm -s dir -t rpm \
          -n cassandra-analyzer \
          -v "${VERSION}" \
          --description "Comprehensive Cassandra cluster analysis tool powered by AxonOps" \
          --url "https://github.com/axonops/cassandra-analyzer" \
          --license "Apache-2.0" \
          --vendor "AxonOps" \
          --architecture x86_64 \
          --category "Applications/Databases" \
          --depends "glibc >= 2.17" \
          --after-install <(echo "echo 'Cassandra Analyzer installed successfully!'") \
          -C rpm \
          usr
        
        mv *.rpm cassandra-analyzer-${VERSION}-1.x86_64.rpm
    
    - name: Upload packages to release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION="${{ github.ref_name }}"
        VERSION="${VERSION#v}"  # Remove 'v' prefix
        gh release upload ${{ github.ref_name }} \
          cassandra-analyzer_${VERSION}_amd64.deb \
          cassandra-analyzer-${VERSION}-1.x86_64.rpm \
          --clobber

  # TODO: Enable Docker build when ready
  # build-docker:
  #   needs: build-and-publish
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v4
  #   
  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v3
  #   
  #   - name: Log in to GitHub Container Registry
  #     uses: docker/login-action@v3
  #     with:
  #       registry: ghcr.io
  #       username: ${{ github.actor }}
  #       password: ${{ secrets.GITHUB_TOKEN }}
  #   
  #   - name: Extract metadata
  #     id: meta
  #     uses: docker/metadata-action@v5
  #     with:
  #       images: ghcr.io/axonops/cassandra-analyzer
  #       tags: |
  #         type=ref,event=tag
  #         type=semver,pattern={{version}}
  #         type=semver,pattern={{major}}.{{minor}}
  #         type=semver,pattern={{major}}
  #         type=sha
  #   
  #   - name: Build and push Docker image
  #     uses: docker/build-push-action@v5
  #     with:
  #       context: .
  #       push: true
  #       tags: ${{ steps.meta.outputs.tags }}
  #       labels: ${{ steps.meta.outputs.labels }}
  #       cache-from: type=gha
  #       cache-to: type=gha,mode=max